// <auto-generated />
using System;
using FlightDocSys.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightDocSys.Migrations
{
    [DbContext(typeof(FlightDocSysContext))]
    [Migration("20231212144028_Userconfig")]
    partial class Userconfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FlightDocSys.Models.Enities.History", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HistoryId");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DocumentId");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FileType");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,1)")
                        .HasDefaultValueSql("((1.0))");

                    b.HasKey("HistoryId");

                    b.HasIndex("DocumentId");

                    b.ToTable("HISTORY", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Enities.IsConfirmed", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DocumentId")
                        .HasName("DocumentId");

                    b.ToTable("IsConfirmed", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("CATEGORY", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DocumentID");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CategoryId");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FileType");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FlightID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<decimal>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,1)")
                        .HasDefaultValueSql("((1.0))");

                    b.HasKey("DocumentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("DOCUMENT", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Flight", b =>
                {
                    b.Property<string>("FlightId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FlightID");

                    b.Property<DateTime>("DeparturedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RouteId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RouteID");

                    b.HasKey("FlightId");

                    b.HasIndex("RouteId");

                    b.ToTable("FLIGHT", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Group", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("GroupId");

                    b.ToTable("GROUP", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Permission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PermissionID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionId");

                    b.ToTable("PERMISSION", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Route", b =>
                {
                    b.Property<string>("RouteId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RouteID");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("PointOfloading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PointOFLoading");

                    b.Property<string>("PointOfunloading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PointOFUnloading");

                    b.HasKey("RouteId");

                    b.ToTable("ROUTE", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Setting", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FilePath");

                    b.Property<string>("NameLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameLogo");

                    b.Property<int>("Theme")
                        .HasColumnType("int")
                        .HasColumnName("Theme");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId")
                        .HasName("PK_UserId");

                    b.ToTable("SETTING", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Relation.GroupCategory", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CategoryId");

                    b.HasKey("GroupId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("GROUP_CATEGORY", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Relation.GroupPermission", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PermissionID");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GroupId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupPermission", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Relation.UserFlight", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<string>("FlightId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FlightId");

                    b.HasKey("UserId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("UserFlight", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Enities.History", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Document", "Document")
                        .WithMany("Histories")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_History_D");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("FlightDocSys.Models.Enities.IsConfirmed", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Document", "Document")
                        .WithOne("IsConfirmed")
                        .HasForeignKey("FlightDocSys.Models.Enities.IsConfirmed", "DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_IsConfirm_Document");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Category", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Category_U");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Document", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Category", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Document_T");

                    b.HasOne("FlightDocSys.Models.Entities.Flight", "Flight")
                        .WithMany("Documents")
                        .HasForeignKey("FlightId")
                        .HasConstraintName("FK_Document_F");

                    b.HasOne("FlightDocSys.Models.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document_U");

                    b.Navigation("Category");

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Flight", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_Flight_R");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Setting", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.User", "User")
                        .WithOne("Setting")
                        .HasForeignKey("FlightDocSys.Models.Entities.Setting", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Setting_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocSys.Models.Relation.GroupCategory", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Category", "Category")
                        .WithMany("GroupCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Category_GROUP");

                    b.HasOne("FlightDocSys.Models.Entities.Group", "Group")
                        .WithMany("GroupCategories")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_Category");

                    b.Navigation("Category");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FlightDocSys.Models.Relation.GroupPermission", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_PERMISSION");

                    b.HasOne("FlightDocSys.Models.Entities.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSION_GROUP");

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("FlightDocSys.Models.Relation.UserFlight", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Flight", "Flight")
                        .WithMany("UserFlights")
                        .HasForeignKey("FlightId")
                        .IsRequired()
                        .HasConstraintName("FK_FLIGHT_USER");

                    b.HasOne("FlightDocSys.Models.Entities.User", "User")
                        .WithMany("UserFlights")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_USER_FLIGHT");

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightDocSys.Models.UserGroup", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_USER");

                    b.HasOne("FlightDocSys.Models.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_USER_GROUP");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightDocSys.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FlightDocSys.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Category", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("GroupCategories");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Document", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("IsConfirmed");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Flight", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("UserFlights");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Group", b =>
                {
                    b.Navigation("GroupCategories");

                    b.Navigation("GroupPermissions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Permission", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.Route", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightDocSys.Models.Entities.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Documents");

                    b.Navigation("Setting");

                    b.Navigation("UserFlights");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
