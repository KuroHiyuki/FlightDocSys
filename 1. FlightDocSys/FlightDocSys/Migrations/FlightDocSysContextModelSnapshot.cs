// <auto-generated />
using System;
using FlightDocSys.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightDocSys.Migrations
{
    [DbContext(typeof(FlightDocSysContext))]
    partial class FlightDocSysContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FlightDocSys.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("FlightID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("TypeDoId")
                        .HasColumnType("int")
                        .HasColumnName("TypeDoID");

                    b.Property<decimal>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,1)")
                        .HasDefaultValueSql("((1.0))");

                    b.HasKey("DocumentId");

                    b.ToTable("DOCUMENT", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("FlightID");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RouteID");

                    b.HasKey("FlightId");

                    b.ToTable("FLIGHT", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("GroupId");

                    b.ToTable("GROUP", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.GroupPermission", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GroupId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GROUP_PERMISSION", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionId");

                    b.ToTable("PERMISSION", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("ROLE", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.Route", b =>
                {
                    b.Property<string>("RouteId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RouteID");

                    b.Property<short?>("Duration")
                        .HasColumnType("smallint");

                    b.Property<string>("PointOfloading")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PointOFLoading");

                    b.Property<string>("PointOfunloading")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PointOFUnloading");

                    b.HasKey("RouteId");

                    b.ToTable("ROUTE", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.TypeDo", b =>
                {
                    b.Property<int>("TypeDoId")
                        .HasColumnType("int")
                        .HasColumnName("TypeDoID");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TypeDoId");

                    b.ToTable("TypeDo", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumberPhone")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool>("StatusCode")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("USER_GROUP", (string)null);
                });

            modelBuilder.Entity("GroupDocument", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.HasKey("GroupId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("GROUP_DOCUMENT", (string)null);
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ROLE_PERMISSION", (string)null);
                });

            modelBuilder.Entity("UserDocument", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.HasKey("UserId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("USER_DOCUMENT", (string)null);
                });

            modelBuilder.Entity("UserFlight", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("FlightID");

                    b.HasKey("UserId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("USER_FLIGHT", (string)null);
                });

            modelBuilder.Entity("FlightDocSys.Models.GroupPermission", b =>
                {
                    b.HasOne("FlightDocSys.Models.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GROUP");

                    b.HasOne("FlightDocSys.Models.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSION_G");

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("FlightDocSys.Models.User", b =>
                {
                    b.HasOne("FlightDocSys.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_USER_ROLE");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlightDocSys.Models.UserGroup", b =>
                {
                    b.HasOne("FlightDocSys.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_U");

                    b.HasOne("FlightDocSys.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_USER_G");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupDocument", b =>
                {
                    b.HasOne("FlightDocSys.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_DOCUMENT_G");

                    b.HasOne("FlightDocSys.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_D");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("FlightDocSys.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSION");

                    b.HasOne("FlightDocSys.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ROLE");
                });

            modelBuilder.Entity("UserDocument", b =>
                {
                    b.HasOne("FlightDocSys.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_DOCUMENT_U");

                    b.HasOne("FlightDocSys.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_USER_D");
                });

            modelBuilder.Entity("UserFlight", b =>
                {
                    b.HasOne("FlightDocSys.Models.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .IsRequired()
                        .HasConstraintName("FK_FLIGHT");

                    b.HasOne("FlightDocSys.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_USER");
                });

            modelBuilder.Entity("FlightDocSys.Models.Group", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("FlightDocSys.Models.Permission", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("FlightDocSys.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FlightDocSys.Models.User", b =>
                {
                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
